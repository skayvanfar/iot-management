plugins {
    id 'com.adarshr.test-logger' version '3.0.0'
    id 'org.springframework.boot' version '2.5.5'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'jacoco'
}

group 'ir.sk.iot'
version 'unspecified'

ext {
    set('springCloudVersion', "Hoxton.SR8")
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-security'

    implementation platform("org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}")
    implementation 'org.springframework.cloud:spring-cloud-stream'
    implementation 'org.springframework.cloud:spring-cloud-stream-binder-kafka'

    implementation 'org.mapstruct:mapstruct:1.4.2.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.4.2.Final'
    implementation 'com.google.code.findbugs:jsr305:3.0.2'
    implementation 'org.immutables:value:2.8.8'
    annotationProcessor 'org.immutables:value:2.8.8'
    implementation 'org.apache.commons:commons-lang3:3.12.0'

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'io.projectreactor:reactor-test'

}

test {
    useJUnitPlatform()
}

testlogger {
    theme 'mocha-parallel'
    showExceptions true
    showStackTraces true
    showFullStackTraces false
    showCauses true
    slowThreshold 2000
    showSummary true
    showSimpleNames false
    showPassed true
    showSkipped true
    showFailed true
    showStandardStreams false
    showPassedStandardStreams true
    showSkippedStandardStreams true
    showFailedStandardStreams true
    logLevel 'lifecycle'
}

jacocoTestReport {
    reports {
        html.getRequired().set(true)
        xml.getRequired().set(true)
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: [
                            'br/com/iot/producer/simulator/api/ApplicationStarter.class',
                            'br/com/iot/producer/simulator/api/exception/**',
                            'br/com/iot/producer/simulator/api/mapper/**',
                            'br/com/iot/producer/simulator/api/config/**',
                            'br/com/iot/producer/simulator/api/model/**',
                            'br/com/iot/producer/simulator/api/controller/request/**',
                            'br/com/iot/producer/simulator/api/controller/response/**'
                    ]
            )
        }))
    }
}

check.dependsOn jacocoTestReport
